// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CallsForService;
//
//    var calls = Calls.FromJson(jsonString);

namespace CallsForService
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Calls
    {
        [JsonProperty("address_x")]
        public string AddressX { get; set; }

        [JsonProperty("agency")]
        public string Agency { get; set; }

        [JsonProperty("create_time_incident")]
        public DateTimeOffset CreateTimeIncident { get; set; }

        [JsonProperty("disposition_text")]
        public string DispositionText { get; set; }

        [JsonProperty("event_number")]
        public string EventNumber { get; set; }

        [JsonProperty("incident_type_id")]
        public string IncidentTypeId { get; set; }

        [JsonProperty("incident_type_desc")]
        public string IncidentTypeDesc { get; set; }

        [JsonProperty("priority")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Priority { get; set; }

        [JsonProperty("priority_color")]
        public string PriorityColor { get; set; }

        [JsonProperty("arrival_time_primary_unit", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ArrivalTimePrimaryUnit { get; set; }

        [JsonProperty("closed_time_incident")]
        public DateTimeOffset ClosedTimeIncident { get; set; }

        [JsonProperty("dispatch_time_primary_unit", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DispatchTimePrimaryUnit { get; set; }

        [JsonProperty("beat")]
        public string Beat { get; set; }

        [JsonProperty("district")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long District { get; set; }

        [JsonProperty("cpd_neighborhood")]
        public string CpdNeighborhood { get; set; }

        [JsonProperty("community_council_neighborhood")]
        public string CommunityCouncilNeighborhood { get; set; }

        [JsonProperty("latitude_x")]
        public string LatitudeX { get; set; }

        [JsonProperty("longitude_x")]
        public string LongitudeX { get; set; }
    }

    public partial class Calls
    {
        public static List<Calls> FromJson(string json) => JsonConvert.DeserializeObject<List<Calls>>(json, CallsForService.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Calls> self) => JsonConvert.SerializeObject(self, CallsForService.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
